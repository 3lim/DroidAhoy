package com.example.droidahoy;

import java.util.ArrayList;

import android.app.*;
import android.bluetooth.*;
import android.content.*;
import android.os.*;
import android.view.View.OnClickListener;
import android.widget.*;

public class BluetoothAhoy extends Activity implements SensorEventListener {

	private ArrayList<BluetoothDevice> foundDevices;
	private BluetoothAdapter bluetooth;
	private BluetoothSocket socket;
	private UUID uuid = UUID.fromString("9bab7407-243a-30d0-b082-4696e73f01aa");

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		// Get the Bluetooth Adapter
		configureBluetooth();
		// Setup the ListView of discovered devices
		setupListView();
		// Setup search button
		setupSearchButton();
		// Setup listen button
		setupListenButton();
	}

	private void configureBluetooth() {
		bluetooth = BluetoothAdapter.getDefaultAdapter();
	}

	private ArrayAdapter<BluetoothDevice> aa;
	private ListView list;

	private void setupListView() {
		aa = new ArrayAdapter<BluetoothDevice>(this,
				android.R.layout.simple_list_item_1,
				foundDevices);
		list = (ListView)findViewById(R.id.list_discovered);
		list.setAdapter(aa);
	}

	BroadcastReceiver discoveryResult = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			BluetoothDevice remoteDevice;
			remoteDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
			if (bluetooth.getBondedDevices().contains(remoteDevice)) {
				foundDevices.add(remoteDevice);
				aa.notifyDataSetChanged();
			}
		}
	};


public void onClick(View view) {
	registerReceiver(discoveryResult,
			new IntentFilter(BluetoothDevice.ACTION_FOUND));
	if (!bluetooth.isDiscovering()) {
		foundDevices.clear();
		bluetooth.startDiscovery();
	}
}
});
}

private void setupSearchButton(){ Button searchButton = (Button)findViewById(R.id.button_search);
searchButton.setOnClickListener(new OnClickListener() {
	public void onClick(View view) {
		registerReceiver(discoveryResult,
				new IntentFilter(BluetoothDevice.ACTION_FOUND));
		if (!bluetooth.isDiscovering()) {
			foundDevices.clear();
			bluetooth.startDiscovery();
		}
	}
});}

/*
	   private void switchUI() {

		 final TextView messageText = (TextView)findViewById(R.id.text_messages);
		 final EditText textEntry = (EditText)findViewById(R.id.text_message);
		 messageText.setVisibility(View.VISIBLE);
		 list.setVisibility(View.GONE);
		 textEntry.setEnabled(true);
		 }
 */

private static int DISCOVERY_REQUEST = 1;
private void setupListenButton() {
	Button listenButton = (Button)findViewById(R.id.button_listen);
	listenButton.setOnClickListener(new OnClickListener()) {
		public void onClick(View view) {
			Intent disc;
			disc = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
			startActivityForResult(disc, DISCOVERY_REQUEST);
		}
	});
}
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent
		data) {
	if (requestCode == DISCOVERY_REQUEST) {
		boolean isDiscoverable = resultCode > 0;
		if (isDiscoverable) {
			String name = "bluetoothserver";
			try {
				final BluetoothServerSocket btserver =
						bluetooth.listenUsingRfcommWithServiceRecord(name, uuid);
				AsyncTask<Integer, Void, BluetoothSocket> acceptThread =
						new AsyncTask<Integer, Void, BluetoothSocket>() {
					@Override
					protected BluetoothSocket doInBackground(Integer . . .params) {

						try {
							socket = btserver.accept(params[0]*1000);
							return socket;
						} catch (IOException e) {
							//Log.d("BLUETOOTH", e.getMessage());
						}

						return null;
					}
					@Override
					protected void onPostExecute(BluetoothSocket result) {
						if (result != null)
							switchUI();
					}
				};
				acceptThread.execute(resultCode);
			} catch (IOException e) {
				//Log.d("BLUETOOTH", e.getMessage());
			}
		}
	}
}


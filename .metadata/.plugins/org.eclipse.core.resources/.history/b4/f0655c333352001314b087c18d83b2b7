//cube.cpp
#include <GL/glut.h>

int window;
int anglex=0, angley=0, anglez=0;
void init(void)
{
	glClearColor (0.0, 0.0
			, 0.0, 0.0);
	glShadeModel (GL_FLAT);
}
void display(void)
{
	glClear (GL_COLOR_BUFFER_BIT);
	// glColor3f (1.0, 1.0, 1.0);
	glColor3f (0.0, 1.0, 0.0);
	glLoadIdentity (); /* clear the matrix */
	/* viewing transformation */
	// gluLookAt (0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	gluLookAt (0.0, 0.0, 5.0, 0.6, 0.5, 0.0, 0.0, 1.0, 0.0);
	glScalef (1.0, 2.0, 1.0); /* modeling transformation */
	glRotatef( anglex, 1.0, 0.0, 0.0); //rotate about x
	-
	axis
	glRotatef(
			angley, 0.0, 1.0, 0.0); //rotate ablout y
	-
	axis
	glRotatef( anglez, 0.0, 0.0, 1.0); //rotate about z
	-
	axis
	glutWireCube (1.0);
	glFlush ();
}
void reshape (int w, int h)
{
	glViewport (0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode (GL_PROJECTION
	);
	glLoadIdentity ();
	glFrustum (
			-
			1.0, 1.0,
			-
			1.0, 1.0, 1.5, 20.0);
	glMatrixMode (GL_MODELVIEW);
}
void keyboard ( unsigned char key, int x, int y)
{
	switch ( key ) {
	case 27:
		glutDestroyWindow(window);
	case 'x':
		anglex = ( anglex + 5 ) % 360;
		break;
	case 'X':
		anglex = ( anglex
				-
				5 ) % 360;
		break;
	case 'y':
		angley = ( angley + 5 ) % 360;
		break;
	case 'Y':
		angley = ( angley
				-
				5 ) % 360;
		break;
	case 'z':
		anglez = ( anglez + 5 ) % 360;
		break;
	case 'Z':
		anglez = ( anglez
				-
				5 ) % 360;
		break;
	}
	glutPostRedisplay();
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	g
	lutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize (500, 500);
	glutInitWindowPosition (100, 100);
	window =glutCreateWindow (argv[0]);
	init ();
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}
